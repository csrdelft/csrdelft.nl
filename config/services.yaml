# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  container.dumper.inline_class_loader: true
  app.supported_locales: 'nl|en'
  memcached_url: '%env(MEMCACHED_URL)%'
  wiki_url: '%env(WIKI_URL)%'

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.

  CsrDelft\:
    resource: '../lib'
    exclude: '../lib/{common,Kernel.php}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  CsrDelft\controller\:
    resource: '../lib/controller'
    tags: ['controller.service_arguments']

  CsrDelft\model\:
    resource: '../lib/model'
    exclude: '../lib/model/entity'
    public: true # Alle modellen zijn uit de container te trekken.

  CsrDelft\view\:
    resource: '../lib/view'

  CsrDelft\view\bbcode\tag\:
    resource: '../lib/view/bbcode/tag/'
    shared: false # iedere instance is uniek
    public: true

  CsrDelft\repository\:
    resource: '../lib/repository'
    public: true # Alle repositories zijn (voor nu) uit de container te trekken.

  CsrDelft\service\:
    resource: '../lib/service'
    public: true

  CsrDelft\common\Serializer\Normalizer\:
    resource: '../lib/common/Serializer/Normalizer'
    tags:
      - { name: serializer.normalizer }

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  CsrDelft\events\ViewEventListener:
    tags:
      - { name: kernel.event_listener, event: kernel.view }

  CsrDelft\events\AccessControlEventListener:
    tags:
      - { name: kernel.event_listener, event: kernel.controller }

  CsrDelft\events\JsonBodyEventListener:
    tags:
      - { name: kernel.event_listener, event: kernel.request }

  CsrDelft\events\ApiTrustedHostsEventListener:
    tags:
      - { name: kernel.event_listener, event: kernel.request }

  CsrDelft\events\CacheControlEventListener:
    tags:
      - { name: kernel.event_listener, event: kernel.response }

  CsrDelft\common\Security\PersistentTokenProvider: ~
  Symfony\Component\Security\Http\RememberMe\PersistentRememberMeHandler: '@security.authenticator.remember_me_handler.main'

  CsrDelft\controller\security\SessionController:
    tags:
      - { name: security.remember_me_aware }

  CsrDelft\common\Logging\LogActivationStrategy: ~

  CsrDelft\service\security\RemoteLoginAuthenticator:
    arguments:
      - '@security.http_utils'
      - '@CsrDelft\repository\security\RemoteLoginRepository'
      - '@security.authentication.success_handler.main.form_login'
      - '@security.authentication.failure_handler.main.form_login'

  # Voor Zijbalk in blade templates
  CsrDelft\view\Zijbalk:
    public: true

  Psr\Container\ContainerInterface: '@service_container'

  security:
    class: Symfony\Component\Security\Core\Security
    public: true

  # Sta gebruik van twig overal toe.
  # Dit is een tijdelijke oplossing en moet er tzt weer uit gezet worden.
  # Voor nu is het makkelijk om overal templates aan te kunnen roepen en is het in ieder geval
  # beter dan html genereren in PHP code op deze plekken
  Twig\Environment:
    alias: twig
    public: true

  CsrDelft\view\bbcode\CsrBB:
    shared: false
    public: true
    arguments:
      - !tagged_locator  { tag: csr.editor.tag }


  csr.formulier.factory:
    alias: CsrDelft\Component\Formulier\FormulierFactory

  CsrDelft\Component\Formulier\FormulierBuilder:
    shared: false # iedere instance is uniek

  CsrDelft\Component\Formulier\FormulierFactory:
    shared: false
    public: true
    arguments:
      - !tagged_locator { tag: csr.formulier.type, index_by: key }
      - '@request_stack'
      - '@CsrDelft\Component\Formulier\FormulierBuilder'

  CsrDelft\view\bbcode\BbToProsemirror:
    public: true
    arguments:
      - !tagged_locator { tag: csr.editor.mark, default_index_method: getBbTagType }
      - !tagged_locator { tag: csr.editor.node, default_index_method: getBbTagType }
      - '@CsrDelft\view\bbcode\CsrBB'

  CsrDelft\view\bbcode\ProsemirrorToBb:
    public: true
    arguments:
      - !tagged_locator { tag: csr.editor.mark, default_index_method: getMarkType }
      - !tagged_locator { tag: csr.editor.node, default_index_method: getNodeType }

  CsrDelft\Twig\Configurator:
    decorates: 'twig.configurator.environment'

  CsrDelft\command\SponsorAffiliateDownloadCommand:
    arguments:
      - '%env(SPONSOR_SL_HOST)%'
      - '%env(SPONSOR_CLUBID)%'
      - '%env(SPONSOR_USERAGENT)%'

  CsrDelft\command\WelkomCommand:
    arguments:
      - '%env(EMAIL_PUBCIE)%'

  CsrDelft\events\UserResolveListener:
    tags:
      - { name: kernel.event_listener, event: league.oauth2_server.event.user_resolve, method: onUserResolve }

  CsrDelft\events\LogEventListener:
    arguments:
      - '@logger'
    tags:
      - { name: kernel.event_listener, event: kernel.request }
      - { name: monolog.logger, channel: access }

  Monolog\Processor\GitProcessor:
    tags:
      - { name: monolog.processor, handler: access }

  csr.table.factory:
    alias: CsrDelft\Component\DataTable\DataTableFactory

  CsrDelft\Component\DataTable\DataTableBuilder:
    shared: false

  CsrDelft\Component\DataTable\DataTableFactory:
    public: true
    shared: false
    arguments:
      - !tagged_locator { tag: csr.table.type, index_by: key }
      - '@CsrDelft\Component\DataTable\DataTableBuilder'

  CsrDelft\common\Logging\LogProcessor:
    arguments: ['@request_stack', '@security.helper']
    tags:
      - { name: monolog.processor }

  CsrDelft\common\Security\Voter\:
    resource: '../lib/common/Security/Voter'

